knitr::opts_chunk$set(fig.path='{{ site.url }}/post_data/exploring-the-cars-dataset-')
plot(cars)
plot(cars, col="dodgerblue")
str(cars)
library(ggplot2)
g <- ggplot(cars, aes(x=speed, y=dist, color="dodgerblue")) +
geom_point()
print(g)
g <- ggplot(cars, aes(x=speed, y=dist, fill="dodgerblue")) +
geom_point()
print(g)
g <- ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color="dodgerblue")
print(g)
g <- ggplot(cars, aes(x=speed, y=dist)) +
geom_point(color="dodgerblue") +
theme_minimal() +
labs(title = "Cars Dataset")
print(g)
# to be rendered as html for papers.md section
knitr::opts_chunk$set(fig.path='{{ site.url }}/post_data/quirky-r-')
df = data.frame("a"= letters[1:10], "abc" = 1:10)
head(df)
df$ab
df$x
df$hi
df$bc
df[, 3]
in = df
plot(pressure)
Sys.Date()
q()
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
library(knitr)
library(rmarkdown)
library(ggplot2)
library(ggvis)
install.packages("ggvis")
library(ggvis)
plot(iris$Sepal.Length, iris$Petal.Length,        # x variable, y variable
col = iris$Species,                          # colour by species
pch = 16,                                    # type of point to use
cex = 1,                                     # size of point to use
xlab = "Sepal Length",                       # x axis label
ylab = "Petal Length",                       # y axis label
main = "Flower Characteristics in Iris")     # plot title
legend (x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)
library(ggplot2)
gg <- ggplot(iris) +
geom_point(aes(x=Sepal.Length, y=Petal.Length, color = Species)) +
labs(title = "Flower Characteristics in Iris", x = "Sepal Length", y = "Petal Length")
gg
#install.packages("ggvis", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(ggvis)
data(iris)
p <- ggvis(iris, x = ~Sepal.Length, y = ~Petal.Length, fill = ~Species)
layer_points(p)
add_title <- function(vis, ..., x_lab = "X units", title = "Plot Title") {
add_axis(vis, "x", title = x_lab) %>%
add_axis("x", orient = "top", ticks = 0, title = title,
properties = axis_props(
axis = list(stroke = "white"),
labels = list(fontSize = 0)
), ...)
}
p <- ggvis(iris, x = ~Sepal.Length, y = ~Petal.Length, fill = ~Species) %>% add_title(title = "Hello")
layer_points(p)
p <- ggvis(iris, x = ~Sepal.Length, y = ~Petal.Length, fill = ~Species) %>% add_title(title = "Flower Characteristics in Iris",
x_lab = "Sepal.Length")
layer_points(p)
iris2 = iris[, c("Sepal.Length", "Petal.Length")]
i <- sapply(iris2, is.factor)
iris2[i] <- lapply(iris2[i], as.character)
flower <- gvisScatterChart(iris2)
plot(flower)
?gvisScatterChart
library(googleVis)
op <- options(gvis.plot.tag='chart')
options(op)
iris2 = iris[, c("Sepal.Length", "Petal.Length")]
i <- sapply(iris2, is.factor)
iris2[i] <- lapply(iris2[i], as.character)
flower <- gvisScatterChart(iris2)
plot(flower)
print(flower)
print(flower, tag='chart')
flower <- gvisScatterChart(iris2,
options=list(title = 'Flower Characteristics in Iris'))
plot(flower)
library(googleVis)
op <- options(gvis.plot.tag='chart')
options(op)
iris2 = iris[, c("Sepal.Length", "Petal.Length")]
i <- sapply(iris2, is.factor)
iris2[i] <- lapply(iris2[i], as.character)
flower <- gvisScatterChart(iris2,
options=list(title = 'Flower Characteristics in Iris'))
plot(flower)
print(flower, 'chart')
library(rCharts)
install.packages("rCharts")
library(rCharts)
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/rCharts')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth , data = iris, color = 'Species', type = 'point')
library(rCharts)
rPlot(SepalLength ~ SepalWidth , data = iris, color = 'Species', type = 'point')
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
rPlot(SepalLength ~ PetalLength , data = iris, color = 'Species', type = 'point')
rPlot(PetalLength ~ SepalLength , data = iris, color = 'Species', type = 'point')
library(plotly)
data(iris)
plot_ly(iris, x = Sepal.Length, y = Petal.Length, color = Species, mode = "markers")
library(plotly)
data(iris)
plot_ly(iris, x = Sepal.Length, y = Petal.Length, color = Species, mode = "markers") %>%
layout(title = "Flower Characteristics in Iris")
p <- ggplot(iris) +
geom_point(aes(x=Sepal.Length, y=Petal.Length, color = Species)) +
labs(title = "Flower Characteristics in Iris")
ggplotly(p)
devtools::install_github("wch/webshot")
library(webshot)
q()
Sys.Date()
format(Sys.Date())
format(Sys.Date(), '%B')
format(Sys.Date(), '%B', '%d')
format(Sys.Date(), '%B %d, %Y')
q()
install.packages("leaps")
# to be rendered as html for papers.md section
knitr::opts_chunk$set(fig.path='{{ site.url }}/post_data/auto-vars-algos-')
library(leaps)
?step
load("~/Desktop/depaul/CSC423/rdata/R/Exercises&Examples/EXEXSAL2.Rdata")
library(MASS)
full.model <- lm(Y~X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, data=EXEXSAL2)
model = step(full.model, direction="backward")
summary(model)
plot(model)
?plot
min.model = lm(Y ~ 1, data=EXEXSAL2)          # aka intercept only model
biggest = formula(lm(Y ~ ., data=EXEXSAL2))   # note dot: all variables, including ID
model = step(min.model, direction='forward', scope=biggest)
summary(model)
plot(model)
model = step(full.model, direction="both")
summary(model)
plot(model)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.path='{{ site.url }}/post_data/maps-r-'
)
library(maps)
map('county', 'connecticut', col = "dodgerblue")
# Better example
library(ggplot2)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- reshape2::melt(crimes, id = 1)
if (require(maps)) {
states_map <- map_data("state")
ggplot(crimes, aes(map_id = state)) +
geom_map(aes(fill = Murder), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat)
last_plot() + coord_map()
ggplot(crimesm, aes(map_id = state)) +
geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
facet_wrap( ~ variable)
}
library(leaflet)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=122.6765, lat=45.5231, popup="Portland, OR")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=122.6765, lng=45.5231, popup="Portland, OR")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=45.523452, lng=-122.67620, popup="Portland, OR")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron")  %>%
addMarkers(lat=45.523452, lng=-122.67620, popup="Portland, OR")
m  # Print the map
q()
